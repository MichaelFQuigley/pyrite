#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS  # noqa


__version__ = (2016, 4, 17, 23, 59, 7, 6)

__all__ = [
    'grammarParser',
    'grammarSemantics',
    'main'
]


class grammarParser(Parser):
    def __init__(self,
                 whitespace=None,
                 nameguard=None,
                 comments_re=None,
                 eol_comments_re=None,
                 ignorecase=None,
                 left_recursion=True,
                 **kwargs):
        super(grammarParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            **kwargs
        )

    @graken('Start')
    def _start_(self):

        def block1():
            with self._choice():
                with self._option():
                    with self._if():
                        self._NEWLINE_()
                with self._option():
                    self._stmt_()
                self._error('no available options')
        self._closure(block1)
        self.ast['stmts'] = self.last_node
        self._check_eof()

        self.ast._define(
            ['stmts'],
            []
        )

    @graken('Stmt')
    def _stmt_(self):

        def block1():
            self._simple_stmt_()
            with self._if():
                self._NEWLINE_()
        self._closure(block1)
        self.ast['simple'] = self.last_node

        self.ast._define(
            ['simple'],
            []
        )

    @graken('SimpleStmt')
    def _simple_stmt_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._loop_stmt_()
                with self._option():
                    self._if_stmt_()
                with self._option():
                    self._assign_stmt_()
                with self._option():
                    self._comparison_()
                with self._option():
                    self._list_expr_()
                with self._option():
                    self._expr_stmt_()
                self._error('no available options')
        self.ast['simple'] = self.last_node

        self.ast._define(
            ['simple'],
            []
        )

    @graken('Args')
    def _args_(self):
        self._comparison_()
        self.ast['arg1'] = self.last_node

        def block2():
            self._token(',')
            self._comparison_()
        self._closure(block2)
        self.ast['argrest'] = self.last_node

        self.ast._define(
            ['arg1', 'argrest'],
            []
        )

    @graken('ListExpr')
    def _list_expr_(self):
        self._token('[')
        with self._optional():
            self._args_()
        self.ast['arguments'] = self.last_node
        self._token(']')

        self.ast._define(
            ['arguments'],
            []
        )

    @graken('LoopStmt')
    def _loop_stmt_(self):
        self._token('loop')
        with self._optional():
            self._simple_stmt_()
        self._token(';')
        with self._optional():
            self._comparison_()
        self._token(';')
        with self._optional():
            self._simple_stmt_()
        self._token('{')
        self._stmt_()
        self._token('}')

    @graken('IfStmt')
    def _if_stmt_(self):
        self._token('if')
        self._comparison_()
        self._token('{')
        self._stmt_()
        self._token('}')
        with self._optional():

            def block0():
                self._token('elif')
                self._comparison_()
                self._token('{')
                self._stmt_()
                self._token('}')
            self._positive_closure(block0)

            with self._optional():
                self._token('else')
                self._token('{')
                self._stmt_()
                self._token('}')

    @graken('Comparison')
    def _comparison_(self):
        self._expr_stmt_()
        self.ast['lhs'] = self.last_node

        def block2():
            self._comp_op_()
            self._expr_stmt_()
        self._closure(block2)
        self.ast['rhs'] = self.last_node

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken('AssignStmt')
    def _assign_stmt_(self):
        self._NAME_()
        self.ast['lhs'] = self.last_node
        self._token('=')
        self._simple_stmt_()
        self.ast['rhs'] = self.last_node

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken('ExprStmt')
    def _expr_stmt_(self):
        self._xor_expr_()
        self.ast['lhs'] = self.last_node

        def block2():
            self._token('|')
            self._xor_expr_()
        self._closure(block2)
        self.ast['rhs'] = self.last_node

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken('XorStmt')
    def _xor_expr_(self):
        self._and_expr_()
        self.ast['lhs'] = self.last_node

        def block2():
            self._token('^')
            self._and_expr_()
        self._closure(block2)
        self.ast['rhs'] = self.last_node

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken('AndExpr')
    def _and_expr_(self):
        self._shift_expr_()
        self.ast['lhs'] = self.last_node

        def block2():
            self._token('&')
            self._shift_expr_()
        self._closure(block2)
        self.ast['rhs'] = self.last_node

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken('ShiftExpr')
    def _shift_expr_(self):
        self._addition_expr_()
        self.ast['lhs'] = self.last_node

        def block2():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('<<')
                    with self._option():
                        self._token('>>')
                    self._error('expecting one of: << >>')
            self._addition_expr_()
        self._closure(block2)
        self.ast['rhs'] = self.last_node

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken('AdditionExpr')
    def _addition_expr_(self):
        self._mult_expr_()
        self.ast['lhs'] = self.last_node

        def block2():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('+')
                    with self._option():
                        self._token('-')
                    self._error('expecting one of: + -')
            self._mult_expr_()
        self._closure(block2)
        self.ast['rhs'] = self.last_node

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken('MultExpr')
    def _mult_expr_(self):
        self._atom_expr_()
        self.ast['lhs'] = self.last_node

        def block2():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('*')
                    with self._option():
                        self._token('/')
                    self._error('expecting one of: * /')
            self._atom_expr_()
        self._closure(block2)
        self.ast['rhs'] = self.last_node

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken('AtomExpr')
    def _atom_expr_(self):
        with self._choice():
            with self._option():
                with self._group():
                    self._NAME_()
                    self._token('(')
                    with self._optional():
                        self._args_()
                    self._token(')')
                self.ast['fcall'] = self.last_node
            with self._option():
                self._atom_()
                self.ast['at'] = self.last_node
            self._error('no available options')

        self.ast._define(
            ['fcall', 'at'],
            []
        )

    @graken('CompOp')
    def _comp_op_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('<')
                with self._option():
                    self._token('>')
                with self._option():
                    self._token('==')
                with self._option():
                    self._token('>=')
                with self._option():
                    self._token('<=')
                with self._option():
                    self._token('!=')
                self._error('expecting one of: != < <= == > >=')
        self.ast['op'] = self.last_node

        self.ast._define(
            ['op'],
            []
        )

    @graken('Atom')
    def _atom_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('false')
                    self.ast['bool'] = self.last_node
                with self._option():
                    self._token('true')
                    self.ast['bool'] = self.last_node
                with self._option():
                    self._NAME_()
                    self.ast['name'] = self.last_node
                with self._option():
                    with self._group():
                        self._number_()
                    self.ast['num'] = self.last_node
                with self._option():
                    self._STRING_()
                    self.ast['string'] = self.last_node
                self._error('expecting one of: false true')

        self.ast._define(
            ['bool', 'name', 'num', 'string'],
            []
        )

    @graken('Number')
    def _number_(self):
        with self._optional():
            self._token('-')
        self.ast['sign'] = self.last_node
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._FLOAT_()
                    self.ast['float'] = self.last_node
                with self._option():
                    self._UINT_()
                    self.ast['uint'] = self.last_node
                self._error('no available options')

        self.ast._define(
            ['sign', 'float', 'uint'],
            []
        )

    @graken()
    def _UINT_(self):
        self._pattern(r'[0-9]+')

    @graken()
    def _FLOAT_(self):
        self._pattern(r'[0-9]+')

        self._token('.')
        self._pattern(r'[0-9]+')

    @graken()
    def _NAME_(self):
        self._pattern(r'[a-zA-Z$._][-a-zA-Z$._0-9]*')

    @graken()
    def _NEWLINE_(self):
        self._pattern(r'\r?\n|\r')

    @graken()
    def _STRING_(self):
        self._token("'")
        self._pattern(r"[^']*(\\')?[^']*")
        self._token("'")


class grammarSemantics(object):
    def start(self, ast):
        return ast

    def stmt(self, ast):
        return ast

    def simple_stmt(self, ast):
        return ast

    def args(self, ast):
        return ast

    def list_expr(self, ast):
        return ast

    def loop_stmt(self, ast):
        return ast

    def if_stmt(self, ast):
        return ast

    def comparison(self, ast):
        return ast

    def assign_stmt(self, ast):
        return ast

    def expr_stmt(self, ast):
        return ast

    def xor_expr(self, ast):
        return ast

    def and_expr(self, ast):
        return ast

    def shift_expr(self, ast):
        return ast

    def addition_expr(self, ast):
        return ast

    def mult_expr(self, ast):
        return ast

    def atom_expr(self, ast):
        return ast

    def comp_op(self, ast):
        return ast

    def atom(self, ast):
        return ast

    def number(self, ast):
        return ast

    def UINT(self, ast):
        return ast

    def FLOAT(self, ast):
        return ast

    def NAME(self, ast):
        return ast

    def NEWLINE(self, ast):
        return ast

    def STRING(self, ast):
        return ast


def main(filename, startrule, trace=False, whitespace=None, nameguard=None):
    import json
    with open(filename) as f:
        text = f.read()
    parser = grammarParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import argparse
    import string
    import sys

    class ListRules(argparse.Action):
        def __call__(self, parser, namespace, values, option_string):
            print('Rules:')
            for r in grammarParser.rule_list():
                print(r)
            print()
            sys.exit(0)

    parser = argparse.ArgumentParser(description="Simple parser for grammar.")
    parser.add_argument('-l', '--list', action=ListRules, nargs=0,
                        help="list all rules and exit")
    parser.add_argument('-n', '--no-nameguard', action='store_true',
                        dest='no_nameguard',
                        help="disable the 'nameguard' feature")
    parser.add_argument('-t', '--trace', action='store_true',
                        help="output trace information")
    parser.add_argument('-w', '--whitespace', type=str, default=string.whitespace,
                        help="whitespace specification")
    parser.add_argument('file', metavar="FILE", help="the input file to parse")
    parser.add_argument('startrule', metavar="STARTRULE",
                        help="the start rule for parsing")
    args = parser.parse_args()

    main(
        args.file,
        args.startrule,
        trace=args.trace,
        whitespace=args.whitespace,
        nameguard=not args.no_nameguard
    )
