#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS, generic_main  # noqa


__version__ = (2016, 4, 23, 22, 15, 53, 5)

__all__ = [
    'grammarParser',
    'grammarSemantics',
    'main'
]

KEYWORDS = set([
    'elif',
    'else',
    'false',
    'if',
    'loop',
    'true',
])


class grammarParser(Parser):
    def __init__(self,
                 whitespace=None,
                 nameguard=None,
                 comments_re=None,
                 eol_comments_re=None,
                 ignorecase=None,
                 left_recursion=True,
                 keywords=KEYWORDS,
                 **kwargs):
        super(grammarParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            keywords=keywords,
            **kwargs
        )

    @graken('Start')
    def _start_(self):

        def block1():
            with self._choice():
                with self._option():
                    with self._if():
                        self._NEWLINE_()
                with self._option():
                    self._top_lvl_()
                self._error('no available options')
        self._closure(block1)
        self.name_last_node('stmts')
        self._check_eof()

        self.ast._define(
            ['stmts'],
            []
        )

    @graken('Stmt')
    def _stmt_(self):

        def block1():
            self._simple_stmt_()
            with self._if():
                self._NEWLINE_()
        self._closure(block1)
        self.name_last_node('simple')

        self.ast._define(
            ['simple'],
            []
        )

    @graken('TopLvl')
    def _top_lvl_(self):

        def block1():
            self._func_stmt_()
            with self._if():
                self._NEWLINE_()
        self._closure(block1)
        self.name_last_node('top')

        self.ast._define(
            ['top'],
            []
        )

    @graken('SimpleStmt')
    def _simple_stmt_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._return_stmt_()
                with self._option():
                    self._if_stmt_()
                with self._option():
                    self._loop_stmt_()
                with self._option():
                    self._assign_stmt_()
                with self._option():
                    self._comparison_()
                with self._option():
                    self._list_expr_()
                with self._option():
                    self._expr_stmt_()
                self._error('no available options')
        self.name_last_node('simple')

        self.ast._define(
            ['simple'],
            []
        )

    @graken('RetStmt')
    def _return_stmt_(self):
        self._token('return ')
        self._simple_stmt_()
        self.name_last_node('ret_val')

        self.ast._define(
            ['ret_val'],
            []
        )

    @graken('Args')
    def _args_(self):
        self._comparison_()
        self.name_last_node('arg1')

        def block2():
            self._token(',')
            self._comparison_()
        self._closure(block2)
        self.name_last_node('argrest')

        self.ast._define(
            ['arg1', 'argrest'],
            []
        )

    @graken('ListExpr')
    def _list_expr_(self):
        self._token('[')
        with self._optional():
            self._args_()
        self.name_last_node('arguments')
        self._token(']')

        self.ast._define(
            ['arguments'],
            []
        )

    @graken('LoopStmt')
    def _loop_stmt_(self):
        self._token('loop')
        self._token('(')
        with self._optional():
            self._simple_stmt_()
        self.name_last_node('first_stmt')
        self._token(';')
        with self._optional():
            self._comparison_()
        self.name_last_node('second_stmt')
        self._token(';')
        with self._optional():
            self._simple_stmt_()
        self.name_last_node('third_stmt')
        self._token(')')
        self._scope_block_()
        self.name_last_node('loop_block')

        self.ast._define(
            ['first_stmt', 'second_stmt', 'third_stmt', 'loop_block'],
            []
        )

    @graken('IfStmt')
    def _if_stmt_(self):
        self._token('if')
        self._token('(')
        self._comparison_()
        self.name_last_node('iif_comp')
        self._token(')')
        self._scope_block_()
        self.name_last_node('iif_stmt')
        with self._optional():
            self._token('else')
            with self._group():
                with self._choice():
                    with self._option():
                        self._scope_block_()
                        self.name_last_node('eelse_stmt')
                    with self._option():
                        with self._group():
                            self._simple_stmt_()
                            self.name_last_node('simple')
                    self._error('no available options')
        self.name_last_node('eelse')

        self.ast._define(
            ['iif_comp', 'iif_stmt', 'eelse', 'eelse_stmt', 'simple'],
            []
        )

    @graken('FuncStmt')
    def _func_stmt_(self):
        self._token('func ')
        self._name_ws_()
        self.name_last_node('name')
        self._token('(')
        with self._optional():
            self._args_()
        self.name_last_node('arguments')
        self._token(')')
        self._token('->')
        self._name_ws_()
        self.name_last_node('ret_type')
        self._scope_block_()
        self.name_last_node('func_block')

        self.ast._define(
            ['name', 'arguments', 'ret_type', 'func_block'],
            []
        )

    @graken()
    def _name_ws_(self):
        self._NAME_()

    @graken('ScopeBlock')
    def _scope_block_(self):
        self._token('{')
        self._stmt_()
        self.name_last_node('statement')
        self._token('}')

        self.ast._define(
            ['statement'],
            []
        )

    @graken('Comparison')
    def _comparison_(self):
        self._expr_stmt_()
        self.name_last_node('lhs')
        with self._optional():
            self._comp_op_()
            self._expr_stmt_()
        self.name_last_node('rhs')

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken('AssignStmt')
    def _assign_stmt_(self):
        self._NAME_()
        self.name_last_node('lhs')
        self._token('=')
        self._simple_stmt_()
        self.name_last_node('rhs')

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken('ExprStmt')
    def _expr_stmt_(self):
        self._xor_expr_()
        self.name_last_node('lhs')

        def block2():
            self._token('|')
            self._xor_expr_()
        self._closure(block2)
        self.name_last_node('rhs')

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken('XorStmt')
    def _xor_expr_(self):
        self._and_expr_()
        self.name_last_node('lhs')

        def block2():
            self._token('^')
            self._and_expr_()
        self._closure(block2)
        self.name_last_node('rhs')

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken('AndExpr')
    def _and_expr_(self):
        self._shift_expr_()
        self.name_last_node('lhs')

        def block2():
            self._token('&')
            self._shift_expr_()
        self._closure(block2)
        self.name_last_node('rhs')

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken('ShiftExpr')
    def _shift_expr_(self):
        self._addition_expr_()
        self.name_last_node('lhs')

        def block2():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('<<')
                    with self._option():
                        self._token('>>')
                    self._error('expecting one of: << >>')
            self._addition_expr_()
        self._closure(block2)
        self.name_last_node('rhs')

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken('AdditionExpr')
    def _addition_expr_(self):
        self._mult_expr_()
        self.name_last_node('lhs')

        def block2():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('+')
                    with self._option():
                        self._token('-')
                    self._error('expecting one of: + -')
            self._mult_expr_()
        self._closure(block2)
        self.name_last_node('rhs')

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken('MultExpr')
    def _mult_expr_(self):
        self._atom_expr_()
        self.name_last_node('lhs')

        def block2():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('*')
                    with self._option():
                        self._token('/')
                    self._error('expecting one of: * /')
            self._atom_expr_()
        self._closure(block2)
        self.name_last_node('rhs')

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken('AtomExpr')
    def _atom_expr_(self):
        with self._choice():
            with self._option():
                with self._group():
                    self._NAME_()
                    self._token('(')
                    with self._optional():
                        self._args_()
                    self._token(')')
                self.name_last_node('fcall')
            with self._option():
                self._atom_()
                self.name_last_node('at')
            self._error('no available options')

        self.ast._define(
            ['fcall', 'at'],
            []
        )

    @graken('CompOp')
    def _comp_op_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('<')
                with self._option():
                    self._token('>')
                with self._option():
                    self._token('==')
                with self._option():
                    self._token('>=')
                with self._option():
                    self._token('<=')
                with self._option():
                    self._token('!=')
                self._error('expecting one of: != < <= == > >=')
        self.name_last_node('op')

        self.ast._define(
            ['op'],
            []
        )

    @graken('Atom')
    def _atom_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('false')
                    self.name_last_node('bool')
                with self._option():
                    self._token('true')
                    self.name_last_node('bool')
                with self._option():
                    self._NAME_()
                    self.name_last_node('name')
                with self._option():
                    with self._group():
                        self._number_()
                    self.name_last_node('num')
                with self._option():
                    self._STRING_()
                    self.name_last_node('string')
                self._error('expecting one of: false true')

        self.ast._define(
            ['bool', 'name', 'num', 'string'],
            []
        )

    @graken('Number')
    def _number_(self):
        with self._optional():
            self._token('-')
        self.name_last_node('sign')
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._FLOAT_()
                    self.name_last_node('float')
                with self._option():
                    self._UINT_()
                    self.name_last_node('uint')
                self._error('no available options')

        self.ast._define(
            ['sign', 'float', 'uint'],
            []
        )

    @graken()
    def _UINT_(self):
        self._pattern(r'[0-9]+')

    @graken()
    def _FLOAT_(self):
        self._pattern(r'[0-9]+')

        self._token('.')
        self._pattern(r'[0-9]+')

    @graken()
    def _NAME_(self):
        self._pattern(r'[a-zA-Z$._][-a-zA-Z$._0-9]*')

    @graken()
    def _NEWLINE_(self):
        self._pattern(r'\r?\n|\r')

    @graken()
    def _STRING_(self):
        self._token("'")
        self._pattern(r"[^']*(\\')?[^']*")
        self._token("'")


class grammarSemantics(object):
    def start(self, ast):
        return ast

    def stmt(self, ast):
        return ast

    def top_lvl(self, ast):
        return ast

    def simple_stmt(self, ast):
        return ast

    def return_stmt(self, ast):
        return ast

    def args(self, ast):
        return ast

    def list_expr(self, ast):
        return ast

    def loop_stmt(self, ast):
        return ast

    def if_stmt(self, ast):
        return ast

    def func_stmt(self, ast):
        return ast

    def name_ws(self, ast):
        return ast

    def scope_block(self, ast):
        return ast

    def comparison(self, ast):
        return ast

    def assign_stmt(self, ast):
        return ast

    def expr_stmt(self, ast):
        return ast

    def xor_expr(self, ast):
        return ast

    def and_expr(self, ast):
        return ast

    def shift_expr(self, ast):
        return ast

    def addition_expr(self, ast):
        return ast

    def mult_expr(self, ast):
        return ast

    def atom_expr(self, ast):
        return ast

    def comp_op(self, ast):
        return ast

    def atom(self, ast):
        return ast

    def number(self, ast):
        return ast

    def UINT(self, ast):
        return ast

    def FLOAT(self, ast):
        return ast

    def NAME(self, ast):
        return ast

    def NEWLINE(self, ast):
        return ast

    def STRING(self, ast):
        return ast


def main(
        filename,
        startrule,
        trace=False,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        **kwargs):

    with open(filename) as f:
        text = f.read()
    parser = grammarParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard,
        ignorecase=ignorecase,
        **kwargs)
    return ast

if __name__ == '__main__':
    import json
    ast = generic_main(main, grammarParser, name='grammar')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()
